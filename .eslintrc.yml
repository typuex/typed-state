root: true
parser: "@typescript-eslint/parser"
env:
  commonjs: false
  es6: true
  es2021: true
  node: true
globals:
  NodeJS: readonly
settings:
  import/extensions:
    - .js
    - .ts
  import/parsers:
    "@typescript-eslint/parser":
      - .ts
  import/resolver:
    typescript:
      alwaysTryTypes: true
    node:
      extensions:
        - .js
        - .ts
  node:
    resolvePaths:
      - ./src
    tryExtensions:
      - .js
      - .ts
extends:
  - eslint:recommended
  - plugin:@typescript-eslint/recommended
plugins:
  - "@typescript-eslint"
parserOptions:
  ecmaVersion: 2020
  lib:
    - es2020
  project: "./tsconfig.json"
  ecmaFeatures:
    modules: true
    impliedStrict: true
  sourceType: module
rules:
  no-void:
    - error
    - allowAsStatement: true
  object-curly-spacing:
    - 2
    - always
  key-spacing:
    - 2
  semi:
    - off
  "@typescript-eslint/semi":
    - error
  space-before-function-paren:
    - off
  "@typescript-eslint/space-before-function-paren":
    - error
  "@typescript-eslint/return-await":
    - error
    - always
  require-await:
    - off
  no-return-await:
    - off
  "@typescript-eslint/require-await":
    - error
  quotes:
    - off
  "@typescript-eslint/quotes":
    - error
    - single
  no-useless-constructor:
    - off
  "@typescript-eslint/no-useless-constructor":
    - error
  no-unused-vars:
    - off
  "@typescript-eslint/no-unused-vars":
    - error
  no-unused-expressions:
    - off
  "@typescript-eslint/no-unused-expressions":
    - error
  no-shadow:
    - off
  "@typescript-eslint/no-shadow":
    - error
  no-use-before-define:
    - off
  "@typescript-eslint/no-use-before-define":
    - error
  no-redeclare:
    - off
  "@typescript-eslint/no-redeclare":
    - error
  no-magic-numbers:
    - off
  "@typescript-eslint/no-magic-numbers":
    - error
    - ignore: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      ignoreArrayIndexes: false
      ignoreDefaultValues: false
      enforceConst: true
      detectObjects: true
      ignoreEnums: false
      ignoreNumericLiteralTypes: false
      ignoreReadonlyClassProperties: false
  no-loss-of-precision:
    - off
  "@typescript-eslint/no-loss-of-precision":
    - error
  no-loop-func:
    - off
  "@typescript-eslint/no-loop-func":
    - error
  "@typescript-eslint/consistent-indexed-object-style":
    - error
    - record
  no-duplicate-imports:
    - off
  "@typescript-eslint/no-duplicate-imports":
    - error
  no-invalid-this:
    - off
  "@typescript-eslint/no-invalid-this":
    - error
  no-extra-semi:
    - off
  "@typescript-eslint/no-extra-semi":
    - error
  no-extra-parens:
    - off
  "@typescript-eslint/no-extra-parens":
    - error
  no-empty-function:
    - off
  "@typescript-eslint/no-empty-function":
    - error
  no-dupe-class-members:
    - off
  "@typescript-eslint/no-dupe-class-members":
    - error
  no-array-constructor:
    - off
  "@typescript-eslint/no-array-constructor":
    - error
  lines-between-class-members:
    - off
  "@typescript-eslint/lines-between-class-members":
    - error
  init-declarations:
    - off
  "@typescript-eslint/init-declarations":
    - error
  keyword-spacing:
    - off
  "@typescript-eslint/keyword-spacing":
    - error
  indent:
    - off
  "@typescript-eslint/indent":
    - error
    - 2
  func-call-spacing:
    - off
  "@typescript-eslint/func-call-spacing":
    - error
  dot-notation:
    - off
  "@typescript-eslint/dot-notation":
    - error
  default-param-last:
    - off
  "@typescript-eslint/default-param-last":
    - error
  comma-spacing:
    - off
  "@typescript-eslint/comma-spacing":
    - error
  comma-dangle:
    - off
  "@typescript-eslint/comma-dangle":
    - error
    - enums: always-multiline
      generics: always-multiline
      tuples: always-multiline
      arrays: always-multiline
      objects: always-multiline
      imports: always-multiline
      exports: always-multiline
      functions: always-multiline
  brace-style:
    - off
  "@typescript-eslint/brace-style":
    - error
  "@typescript-eslint/unified-signatures": error
  "@typescript-eslint/unbound-method": error
  "@typescript-eslint/typedef":
    - off
    - arrayDestructuring: true
      arrowParameter: true
      memberVariableDeclaration: true
      objectDestructuring: true
      parameter: true
      propertyDeclaration: true
      variableDeclaration: true
      variableDeclarationIgnoreFunction: true
  "@typescript-eslint/type-annotation-spacing": error
  "@typescript-eslint/triple-slash-reference":
    - error
    - types: prefer-import
  "@typescript-eslint/switch-exhaustiveness-check": error
  "@typescript-eslint/strict-boolean-expressions":
    - error
    - allowString: false
      allowNumber: false
      allowNullableObject: false
      allowNullableBoolean: false
      allowNullableString: false
      allowNullableNumber: false
      allowAny: false
      allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing: false
  "@typescript-eslint/restrict-template-expressions":
    - error
    - allowNumber: false
      allowBoolean: false
      allowAny: false
      allowNullish: false
  "@typescript-eslint/restrict-plus-operands": error
  "@typescript-eslint/require-array-sort-compare": error
  "@typescript-eslint/promise-function-async":
    - error
    - allowAny: false
      allowedPromiseNames: []
      checkArrowFunctions: true
      checkFunctionDeclarations: true
      checkFunctionExpressions: true
      checkMethodDeclarations: true
  "@typescript-eslint/prefer-ts-expect-error": error
  "@typescript-eslint/prefer-string-starts-ends-with": error
  "@typescript-eslint/prefer-regexp-exec": error
  "@typescript-eslint/prefer-reduce-type-parameter": error
  "@typescript-eslint/prefer-readonly-parameter-types": off
  "@typescript-eslint/prefer-readonly": error
  "@typescript-eslint/prefer-optional-chain": error
  "@typescript-eslint/prefer-nullish-coalescing": error
  "@typescript-eslint/prefer-namespace-keyword": error
  "@typescript-eslint/prefer-literal-enum-member": error
  "@typescript-eslint/prefer-includes": error
  "@typescript-eslint/prefer-function-type": error
  "@typescript-eslint/no-unsafe-member-access": error
  "@typescript-eslint/no-unsafe-call": error
  "@typescript-eslint/no-unsafe-assignment": error
  "@typescript-eslint/no-unnecessary-type-assertion": error
  "@typescript-eslint/no-unsafe-return": error
  "@typescript-eslint/no-var-requires": error
  "@typescript-eslint/prefer-as-const": error
  "@typescript-eslint/prefer-enum-initializers": error
  "@typescript-eslint/prefer-for-of": error
  "@typescript-eslint/no-unnecessary-type-arguments": error
  "@typescript-eslint/no-unnecessary-qualifier": error
  "@typescript-eslint/no-unnecessary-condition": error
  "@typescript-eslint/no-unnecessary-boolean-literal-compare": error
  "@typescript-eslint/no-type-alias": off
  "@typescript-eslint/no-throw-literal": error
  "@typescript-eslint/no-this-alias": error
  "@typescript-eslint/no-require-imports": error
  "@typescript-eslint/no-parameter-properties": off
  "@typescript-eslint/no-non-null-assertion": error
  "@typescript-eslint/no-non-null-asserted-optional-chain": error
  "@typescript-eslint/no-namespace": error
  "@typescript-eslint/no-misused-promises": error
  "@typescript-eslint/no-misused-new": error
  "@typescript-eslint/no-invalid-void-type": error
  "@typescript-eslint/no-inferrable-types": error
  "@typescript-eslint/no-implied-eval": error
  "@typescript-eslint/no-implicit-any-catch": error
  "@typescript-eslint/no-for-in-array": error
  "@typescript-eslint/no-floating-promises": error
  "@typescript-eslint/no-extraneous-class": error
  "@typescript-eslint/no-extra-non-null-assertion": error
  "@typescript-eslint/no-explicit-any": error
  "@typescript-eslint/no-empty-interface": error
  "@typescript-eslint/no-dynamic-delete": error
  "@typescript-eslint/no-confusing-non-null-assertion": error
  "@typescript-eslint/no-base-to-string": error
  "@typescript-eslint/naming-convention":
    - warn
    - selector: default
      format:
        - camelCase
        - snake_case
      leadingUnderscore: allow
      trailingUnderscore: allow
    - selector: function
      format:
        - camelCase
        - PascalCase
    - selector: method
      modifiers:
        - public
        - static
      format:
        - PascalCase
    - selector: property
      format:
        - camelCase
        - PascalCase
        - snake_case
    - selector: variable
      format:
        - camelCase
        - UPPER_CASE
      leadingUnderscore: allow
      trailingUnderscore: allow
    - selector: typeLike
      format:
        - PascalCase
    - selector: enumMember
      format:
        - PascalCase
  "@typescript-eslint/method-signature-style": error
  "@typescript-eslint/member-delimiter-style": error
  "@typescript-eslint/explicit-module-boundary-types": error
  "@typescript-eslint/explicit-member-accessibility": error
  "@typescript-eslint/explicit-function-return-type":
    - error
    - allowHigherOrderFunctions: true
      allowDirectConstAssertionInArrowFunctions: true
      allowTypedFunctionExpressions: true
      allowExpressions: true
      allowConciseArrowFunctionExpressionsStartingWithVoid: true
  "@typescript-eslint/consistent-type-imports": error
  "@typescript-eslint/consistent-type-assertions": error
  "@typescript-eslint/consistent-type-definitions": error
  "@typescript-eslint/class-literal-property-style": error
  "@typescript-eslint/ban-types": error
  "@typescript-eslint/ban-tslint-comment": error
  "@typescript-eslint/ban-ts-comment": error
  "@typescript-eslint/await-thenable": error
  "@typescript-eslint/array-type": error
  "@typescript-eslint/adjacent-overload-signatures": error
  yoda:
    - error
    - always
  strict:
    - error
    - global
  no-underscore-dangle:
    - error
    - allowAfterThis: true
  no-multiple-empty-lines:
    - error
    - max: 2
      maxEOF: 0
      maxBOF: 0
reportUnusedDisableDirectives: true
